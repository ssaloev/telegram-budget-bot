import {ACTION_TYPES} from "./types";
import type { ActionType, ActionChannelData } from "./types";
import {logInfo} from "../utils/log";

const amountRegex = '-?\\d+';
const categoryRegex = '[\\p{L}\\p{N}_]+\\s*';
const fullPattern = `^(${amountRegex})\\/(${categoryRegex})$`;

export const locale = {
    handle: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º/–ö–æ—Ä–∫–∞—Ä–¥ ‚åõ',
    handled: '–û–±—Ä–∞–±–∞—Ç–∞–ª–∏/–•–∏—Å–æ–± –∫–∞—Ä–¥–µ–º ‚úÖ',
    yourBudget: '–ë–ê–õ–ê–ù–° üíµ: ',
    trySubtractFromEmpty: '–ë–∞–ª–∞–Ω—Å 0',
    error: '–û—à–∏–±–∫–∞/–•–∞—Ç–æ–≥–∏ —à—É–¥ ‚ùå',
};

export function isActionAct(text) {
    return new RegExp(fullPattern, 'iu').test(text);
}

export function getActionData(text: string): ActionChannelData {
    const matchAll = text.matchAll(new RegExp(fullPattern, 'iug'));
    const allMatchList = Array.from(matchAll);
    const matchList = allMatchList[0];
    return {
        value: +matchList[1],
        actionType: detectActionType(text),
        modifiedType: matchList[2],
    };
}

export function detectActionType(text: string): ActionType {
    return text[0] === '-' ? ACTION_TYPES.SUBTRACT_BUDGET : ACTION_TYPES.ADD_BUDGET;
}



export function replyWhenMessageInWrongFormat(): string {
    return `–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ‚ÄºÔ∏è
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 

+–°–£–ú–ú–ê/–∫–∞—Ç–µ–≥–æ—Ä–∏—è 
–∏–ª–∏
-–°–£–ú–ú–ê/–∫–∞—Ç–µ–≥–æ—Ä–∏—è

–ü—Ä–∏–º–µ—Ä—ã: 
500/–∑–∞—Ä–ø–ª–∞—Ç–∞
-100/–û–±–µ–¥

================

–í–æ—Ä–∏–¥–∫—É–Ω–∏–∏ –Ω–æ–¥—É—Ä—É—Å—Ç–∏ –º–∞—ä–ª—É–º–æ—Ç‚ÄºÔ∏è
–ë–∞—Ä–æ–∏ –≤–æ—Ä–∏–¥ –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç –¥—É—Ä—É—Å—Ç, —Ñ–æ—Ä–º–∞—Ç–∏ –∑–µ—Ä–∏–Ω—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥:

+–ú–ê–ë–õ–ê“í/–∫–∞—Ç–µ–≥–æ—Ä–∏—è
–µ–∫–∏–Ω
-–ú–ê–ë–õ–ê“í/–∫–∞—Ç–µ–≥–æ—Ä–∏—è 

–ù–∞–º—É–Ω–∞“≥–æ:
500/–º–∞–æ—à
-100/—Ä–∞—Ö–ø—É–ª–∏
    `;
}